<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:stat="http://www.alibaba.com/schema/stat"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd">
	<!-- MyBatis之中所有的连接都通过SqlSssionFactory创建的，但是现在这个操作类需要被Spring所管理 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>	<!-- 引入数据源 -->
		<!-- 引入MyBatis的核心配置文件，实际上这个类可以直接完成该配置文件的定义 -->
		<property name="configLocation" value="classpath:META-INF/mybatis/mybatis.cfg.xml"/>
		<!-- 定义所有要引入的映射资源文件的地址 -->
		<property name="mapperLocations" value="classpath:META-INF/mapping/cn/mldn/*.xml"/>
	</bean>
	<!-- 配置一个资源文件的扫描处理类，扫描后的文件自动为DAO实现类 --> 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 定义资源的扫描程序包，这个包下的内容可以自动转换为DAO接口对象 -->
		<property name="basePackage" value="cn.mldn.dibmp.dao"/> 
		<!-- 定义要使用的SqlSessionFactory程序类 -->
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
	</bean>
</beans>
